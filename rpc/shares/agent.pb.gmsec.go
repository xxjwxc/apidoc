// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shares

import (
	context "context"
	micro "github.com/gmsec/micro"
	client "github.com/gmsec/micro/client"
	server "github.com/gmsec/micro/server"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface
var _ server.Server
var _ client.Client
var _ micro.Service

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentClient interface {
	// SearchCodeInfo 获取股票详情
	SearchCodeInfo(ctx context.Context, in *SearchCodeInfoReq, opts ...grpc.CallOption) (*SearchCodeinfoResp, error)
	// SearchHy 获取股票详情
	SearchHy(ctx context.Context, in *SearchHyReq, opts ...grpc.CallOption) (*SearchHyResp, error)
	// SearchCode 通过类型搜索股票代码
	SearchCode(ctx context.Context, in *SearchCodeReq, opts ...grpc.CallOption) (*SearchCodeResp, error)
	// Searchs 通过类型搜索股票代码
	Searchs(ctx context.Context, in *SearchsReq, opts ...grpc.CallOption) (*SearchCodeResp, error)
}

type agentClient struct {
	cc client.Client
}

// GetAgentName get client name(package.class)
func GetAgentName() string {
	return "shares.agent"
}

// GetAgentClient get client by clientname
func GetAgentClient() AgentClient {
	cc := micro.GetClient(GetAgentName())
	return &agentClient{cc}
}

// GetAgentClientByName get client by custom name
func GetAgentClientByName(name string) AgentClient {
	cc := micro.GetClient(name)
	return &agentClient{cc}
}

func NewAgentClient(cc client.Client) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) SearchCodeInfo(ctx context.Context, in *SearchCodeInfoReq, opts ...grpc.CallOption) (*SearchCodeinfoResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(SearchCodeinfoResp)
	err = conn.Invoke(ctx, "/shares.agent/SearchCodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) SearchHy(ctx context.Context, in *SearchHyReq, opts ...grpc.CallOption) (*SearchHyResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(SearchHyResp)
	err = conn.Invoke(ctx, "/shares.agent/SearchHy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) SearchCode(ctx context.Context, in *SearchCodeReq, opts ...grpc.CallOption) (*SearchCodeResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(SearchCodeResp)
	err = conn.Invoke(ctx, "/shares.agent/SearchCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Searchs(ctx context.Context, in *SearchsReq, opts ...grpc.CallOption) (*SearchCodeResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(SearchCodeResp)
	err = conn.Invoke(ctx, "/shares.agent/Searchs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
type AgentServer interface {
	// SearchCodeInfo 获取股票详情
	SearchCodeInfo(context.Context, *SearchCodeInfoReq) (*SearchCodeinfoResp, error)
	// SearchHy 获取股票详情
	SearchHy(context.Context, *SearchHyReq) (*SearchHyResp, error)
	// SearchCode 通过类型搜索股票代码
	SearchCode(context.Context, *SearchCodeReq) (*SearchCodeResp, error)
	// Searchs 通过类型搜索股票代码
	Searchs(context.Context, *SearchsReq) (*SearchCodeResp, error)
}

// UnimplementedAgentServer can be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (*UnimplementedAgentServer) SearchCodeInfo(context.Context, *SearchCodeInfoReq) (*SearchCodeinfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCodeInfo not implemented")
}
func (*UnimplementedAgentServer) SearchHy(context.Context, *SearchHyReq) (*SearchHyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchHy not implemented")
}
func (*UnimplementedAgentServer) SearchCode(context.Context, *SearchCodeReq) (*SearchCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCode not implemented")
}
func (*UnimplementedAgentServer) Searchs(context.Context, *SearchsReq) (*SearchCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Searchs not implemented")
}

func RegisterAgentServer(s server.Server, srv AgentServer) {
	s.GetServer().RegisterService(&_Agent_serviceDesc, srv)
}

func _Agent_SearchCodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCodeInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SearchCodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.agent/SearchCodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SearchCodeInfo(ctx, req.(*SearchCodeInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_SearchHy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchHyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SearchHy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.agent/SearchHy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SearchHy(ctx, req.(*SearchHyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_SearchCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SearchCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.agent/SearchCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SearchCode(ctx, req.(*SearchCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Searchs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Searchs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.agent/Searchs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Searchs(ctx, req.(*SearchsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shares.agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchCodeInfo",
			Handler:    _Agent_SearchCodeInfo_Handler,
		},
		{
			MethodName: "SearchHy",
			Handler:    _Agent_SearchHy_Handler,
		},
		{
			MethodName: "SearchCode",
			Handler:    _Agent_SearchCode_Handler,
		},
		{
			MethodName: "Searchs",
			Handler:    _Agent_Searchs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shares/agent.proto",
}
