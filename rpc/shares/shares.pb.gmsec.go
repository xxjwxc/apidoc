// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shares

import (
	context "context"
	micro "github.com/gmsec/micro"
	client "github.com/gmsec/micro/client"
	server "github.com/gmsec/micro/server"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "rpc/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface
var _ server.Server
var _ client.Client
var _ micro.Service

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SharesClient is the client API for Shares service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SharesClient interface {
	// GetGroup 获取分组信息
	GetGroup(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetGroupResp, error)
	// Search 搜索
	Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error)
}

type sharesClient struct {
	cc client.Client
}

// GetSharesName get client name(package.class)
func GetSharesName() string {
	return "shares.shares"
}

// GetSharesClient get client by clientname
func GetSharesClient() SharesClient {
	cc := micro.GetClient(GetSharesName())
	return &sharesClient{cc}
}

// GetSharesClientByName get client by custom name
func GetSharesClientByName(name string) SharesClient {
	cc := micro.GetClient(name)
	return &sharesClient{cc}
}

func NewSharesClient(cc client.Client) SharesClient {
	return &sharesClient{cc}
}

func (c *sharesClient) GetGroup(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetGroupResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetGroupResp)
	err = conn.Invoke(ctx, "/shares.shares/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(SearchResp)
	err = conn.Invoke(ctx, "/shares.shares/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SharesServer is the server API for Shares service.
type SharesServer interface {
	// GetGroup 获取分组信息
	GetGroup(context.Context, *common.Empty) (*GetGroupResp, error)
	// Search 搜索
	Search(context.Context, *SearchReq) (*SearchResp, error)
}

// UnimplementedSharesServer can be embedded to have forward compatible implementations.
type UnimplementedSharesServer struct {
}

func (*UnimplementedSharesServer) GetGroup(context.Context, *common.Empty) (*GetGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (*UnimplementedSharesServer) Search(context.Context, *SearchReq) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}

func RegisterSharesServer(s server.Server, srv SharesServer) {
	s.GetServer().RegisterService(&_Shares_serviceDesc, srv)
}

func _Shares_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetGroup(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).Search(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Shares_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shares.shares",
	HandlerType: (*SharesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroup",
			Handler:    _Shares_GetGroup_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Shares_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shares/shares.proto",
}
