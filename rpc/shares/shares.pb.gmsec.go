// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shares

import (
	context "context"
	micro "github.com/gmsec/micro"
	client "github.com/gmsec/micro/client"
	server "github.com/gmsec/micro/server"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "rpc/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface
var _ server.Server
var _ client.Client
var _ micro.Service

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SharesClient is the client API for Shares service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SharesClient interface {
	// GetGroup 获取分组信息
	GetGroup(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetGroupResp, error)
	// GetMyGroup 获取分组信息
	GetMyGroup(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*GetMyGroupResp, error)
	// UpsetGroupCode 更新分组信息
	UpsetGroupCode(ctx context.Context, in *UpsetGroupCodeReq, opts ...grpc.CallOption) (*common.Empty, error)
	// Search 搜索
	Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error)
	// Gets 精确查找代码
	Gets(ctx context.Context, in *GetsReq, opts ...grpc.CallOption) (*GetsResp, error)
	// GetAllCodeName 获取所有中文
	GetAllCodeName(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetAllCodeNameResp, error)
	// AddMyCode 给自己添加一个监听
	AddMyCode(ctx context.Context, in *AddMyCodeReq, opts ...grpc.CallOption) (*AddMyCodeResp, error)
	// GetMyCode 获取我的监听,code不为空获取全部
	GetMyCode(ctx context.Context, in *GetMyCodeReq, opts ...grpc.CallOption) (*GetMyCodeResp, error)
	// GetMsg 获取消息
	GetMsg(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetMsgResp, error)
	// HaveNewMsg 是否有新消息
	HaveNewMsg(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*HaveNewMsgResp, error)
	// DeleteMyCode 删除一个监听
	DeleteMyCode(ctx context.Context, in *DeleteMyCodeReq, opts ...grpc.CallOption) (*common.Empty, error)
	// AddGroup 添加一个组织
	AddGroup(ctx context.Context, in *AddGroupReq, opts ...grpc.CallOption) (*common.Empty, error)
}

type sharesClient struct {
	cc client.Client
}

// GetSharesName get client name(package.class)
func GetSharesName() string {
	return "shares.shares"
}

// GetSharesClient get client by clientname
func GetSharesClient() SharesClient {
	cc := micro.GetClient(GetSharesName())
	return &sharesClient{cc}
}

// GetSharesClientByName get client by custom name
func GetSharesClientByName(name string) SharesClient {
	cc := micro.GetClient(name)
	return &sharesClient{cc}
}

func NewSharesClient(cc client.Client) SharesClient {
	return &sharesClient{cc}
}

func (c *sharesClient) GetGroup(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetGroupResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetGroupResp)
	err = conn.Invoke(ctx, "/shares.shares/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetMyGroup(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*GetMyGroupResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetMyGroupResp)
	err = conn.Invoke(ctx, "/shares.shares/GetMyGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) UpsetGroupCode(ctx context.Context, in *UpsetGroupCodeReq, opts ...grpc.CallOption) (*common.Empty, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(common.Empty)
	err = conn.Invoke(ctx, "/shares.shares/UpsetGroupCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(SearchResp)
	err = conn.Invoke(ctx, "/shares.shares/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) Gets(ctx context.Context, in *GetsReq, opts ...grpc.CallOption) (*GetsResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetsResp)
	err = conn.Invoke(ctx, "/shares.shares/Gets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetAllCodeName(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetAllCodeNameResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetAllCodeNameResp)
	err = conn.Invoke(ctx, "/shares.shares/GetAllCodeName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) AddMyCode(ctx context.Context, in *AddMyCodeReq, opts ...grpc.CallOption) (*AddMyCodeResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(AddMyCodeResp)
	err = conn.Invoke(ctx, "/shares.shares/AddMyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetMyCode(ctx context.Context, in *GetMyCodeReq, opts ...grpc.CallOption) (*GetMyCodeResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetMyCodeResp)
	err = conn.Invoke(ctx, "/shares.shares/GetMyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetMsg(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetMsgResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetMsgResp)
	err = conn.Invoke(ctx, "/shares.shares/GetMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) HaveNewMsg(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*HaveNewMsgResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(HaveNewMsgResp)
	err = conn.Invoke(ctx, "/shares.shares/HaveNewMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) DeleteMyCode(ctx context.Context, in *DeleteMyCodeReq, opts ...grpc.CallOption) (*common.Empty, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(common.Empty)
	err = conn.Invoke(ctx, "/shares.shares/DeleteMyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) AddGroup(ctx context.Context, in *AddGroupReq, opts ...grpc.CallOption) (*common.Empty, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(common.Empty)
	err = conn.Invoke(ctx, "/shares.shares/AddGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SharesServer is the server API for Shares service.
type SharesServer interface {
	// GetGroup 获取分组信息
	GetGroup(context.Context, *common.Empty) (*GetGroupResp, error)
	// GetMyGroup 获取分组信息
	GetMyGroup(context.Context, *CodeReq) (*GetMyGroupResp, error)
	// UpsetGroupCode 更新分组信息
	UpsetGroupCode(context.Context, *UpsetGroupCodeReq) (*common.Empty, error)
	// Search 搜索
	Search(context.Context, *SearchReq) (*SearchResp, error)
	// Gets 精确查找代码
	Gets(context.Context, *GetsReq) (*GetsResp, error)
	// GetAllCodeName 获取所有中文
	GetAllCodeName(context.Context, *common.Empty) (*GetAllCodeNameResp, error)
	// AddMyCode 给自己添加一个监听
	AddMyCode(context.Context, *AddMyCodeReq) (*AddMyCodeResp, error)
	// GetMyCode 获取我的监听,code不为空获取全部
	GetMyCode(context.Context, *GetMyCodeReq) (*GetMyCodeResp, error)
	// GetMsg 获取消息
	GetMsg(context.Context, *common.Empty) (*GetMsgResp, error)
	// HaveNewMsg 是否有新消息
	HaveNewMsg(context.Context, *common.Empty) (*HaveNewMsgResp, error)
	// DeleteMyCode 删除一个监听
	DeleteMyCode(context.Context, *DeleteMyCodeReq) (*common.Empty, error)
	// AddGroup 添加一个组织
	AddGroup(context.Context, *AddGroupReq) (*common.Empty, error)
}

// UnimplementedSharesServer can be embedded to have forward compatible implementations.
type UnimplementedSharesServer struct {
}

func (*UnimplementedSharesServer) GetGroup(context.Context, *common.Empty) (*GetGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (*UnimplementedSharesServer) GetMyGroup(context.Context, *CodeReq) (*GetMyGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyGroup not implemented")
}
func (*UnimplementedSharesServer) UpsetGroupCode(context.Context, *UpsetGroupCodeReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsetGroupCode not implemented")
}
func (*UnimplementedSharesServer) Search(context.Context, *SearchReq) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedSharesServer) Gets(context.Context, *GetsReq) (*GetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gets not implemented")
}
func (*UnimplementedSharesServer) GetAllCodeName(context.Context, *common.Empty) (*GetAllCodeNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCodeName not implemented")
}
func (*UnimplementedSharesServer) AddMyCode(context.Context, *AddMyCodeReq) (*AddMyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMyCode not implemented")
}
func (*UnimplementedSharesServer) GetMyCode(context.Context, *GetMyCodeReq) (*GetMyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyCode not implemented")
}
func (*UnimplementedSharesServer) GetMsg(context.Context, *common.Empty) (*GetMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsg not implemented")
}
func (*UnimplementedSharesServer) HaveNewMsg(context.Context, *common.Empty) (*HaveNewMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HaveNewMsg not implemented")
}
func (*UnimplementedSharesServer) DeleteMyCode(context.Context, *DeleteMyCodeReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMyCode not implemented")
}
func (*UnimplementedSharesServer) AddGroup(context.Context, *AddGroupReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroup not implemented")
}

func RegisterSharesServer(s server.Server, srv SharesServer) {
	s.GetServer().RegisterService(&_Shares_serviceDesc, srv)
}

func _Shares_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetGroup(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetMyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetMyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetMyGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetMyGroup(ctx, req.(*CodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_UpsetGroupCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsetGroupCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).UpsetGroupCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/UpsetGroupCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).UpsetGroupCode(ctx, req.(*UpsetGroupCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).Search(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_Gets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).Gets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/Gets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).Gets(ctx, req.(*GetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetAllCodeName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetAllCodeName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetAllCodeName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetAllCodeName(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_AddMyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).AddMyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/AddMyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).AddMyCode(ctx, req.(*AddMyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetMyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetMyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetMyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetMyCode(ctx, req.(*GetMyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetMsg(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_HaveNewMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).HaveNewMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/HaveNewMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).HaveNewMsg(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_DeleteMyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).DeleteMyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/DeleteMyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).DeleteMyCode(ctx, req.(*DeleteMyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/AddGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).AddGroup(ctx, req.(*AddGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Shares_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shares.shares",
	HandlerType: (*SharesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroup",
			Handler:    _Shares_GetGroup_Handler,
		},
		{
			MethodName: "GetMyGroup",
			Handler:    _Shares_GetMyGroup_Handler,
		},
		{
			MethodName: "UpsetGroupCode",
			Handler:    _Shares_UpsetGroupCode_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Shares_Search_Handler,
		},
		{
			MethodName: "Gets",
			Handler:    _Shares_Gets_Handler,
		},
		{
			MethodName: "GetAllCodeName",
			Handler:    _Shares_GetAllCodeName_Handler,
		},
		{
			MethodName: "AddMyCode",
			Handler:    _Shares_AddMyCode_Handler,
		},
		{
			MethodName: "GetMyCode",
			Handler:    _Shares_GetMyCode_Handler,
		},
		{
			MethodName: "GetMsg",
			Handler:    _Shares_GetMsg_Handler,
		},
		{
			MethodName: "HaveNewMsg",
			Handler:    _Shares_HaveNewMsg_Handler,
		},
		{
			MethodName: "DeleteMyCode",
			Handler:    _Shares_DeleteMyCode_Handler,
		},
		{
			MethodName: "AddGroup",
			Handler:    _Shares_AddGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shares/shares.proto",
}
