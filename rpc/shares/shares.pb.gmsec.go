// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shares

import (
	context "context"
	micro "github.com/gmsec/micro"
	client "github.com/gmsec/micro/client"
	server "github.com/gmsec/micro/server"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "rpc/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface
var _ server.Server
var _ client.Client
var _ micro.Service

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SharesClient is the client API for Shares service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SharesClient interface {
	// GetGroup 获取分组信息
	GetGroup(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetGroupResp, error)
	// GetMyGroup 获取分组信息
	GetMyGroup(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*GetMyGroupResp, error)
	// UpsetGroupCode 更新分组信息
	UpsetGroupCode(ctx context.Context, in *UpsetGroupCodeReq, opts ...grpc.CallOption) (*common.Empty, error)
	// Search 搜索
	Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error)
	// Gets 精确查找代码
	Gets(ctx context.Context, in *GetsReq, opts ...grpc.CallOption) (*GetsResp, error)
	// GetAllCodeName 获取所有中文
	GetAllCodeName(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetAllCodeNameResp, error)
	// AddMyCode 给自己添加一个监听
	AddMyCode(ctx context.Context, in *AddMyCodeReq, opts ...grpc.CallOption) (*AddMyCodeResp, error)
	// GetMyCode 获取我的监听,code不为空获取全部
	GetMyCode(ctx context.Context, in *GetMyCodeReq, opts ...grpc.CallOption) (*GetMyCodeResp, error)
	// GetMsg 获取消息
	GetMsg(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetMsgResp, error)
	// HaveNewMsg 是否有新消息
	HaveNewMsg(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*HaveNewMsgResp, error)
	// DeleteMyCode 删除一个监听
	DeleteMyCode(ctx context.Context, in *DeleteMyCodeReq, opts ...grpc.CallOption) (*common.Empty, error)
	// AddGroup 添加一个组织
	AddGroup(ctx context.Context, in *AddGroupReq, opts ...grpc.CallOption) (*common.Empty, error)
	// GetDay 每日精选
	GetDay(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*GetDayResp, error)
	// GetVip vip内参
	GetVip(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*GetDayResp, error)
	// GetFl 放量(打版)
	GetFl(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*GetDayResp, error)
	// GetUp 趋势
	GetUp(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*GetDayResp, error)
	// GetHejjw 获取华尔街见闻
	GetHejjw(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetHejjwResp, error)
	// GetDailyCheck 每日复盘笔记
	GetDailyCheck(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetDailyCheckResp, error)
	GetClmx(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetClmxResp, error)
	GetMyYd(ctx context.Context, in *GetMyYdReq, opts ...grpc.CallOption) (*GetMyYdResp, error)
	// //////////////////////////////////////////////////////////////
	// /////价值/////////////////////////////////////////////////////
	GetHyRm(ctx context.Context, in *GetHyRmReq, opts ...grpc.CallOption) (*GetHyRmResp, error)
	GetMyTeam(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetMyTeamResp, error)
	GetMyTeamDetail(ctx context.Context, in *GetMyTeamDetailReq, opts ...grpc.CallOption) (*GetMyTeamDetailResp, error)
	GetHyMmadd(ctx context.Context, in *GetHyMmaddReq, opts ...grpc.CallOption) (*GetHyMmaddResp, error)
	GetHyZyb(ctx context.Context, in *GetHyMmaddReq, opts ...grpc.CallOption) (*GetHyMmaddResp, error)
	GetSharesKline(ctx context.Context, in *GetSharesKlineReq, opts ...grpc.CallOption) (*GetSharesKlineResp, error)
	GetFundKline(ctx context.Context, in *GetSharesKlineReq, opts ...grpc.CallOption) (*GetFundKlineResp, error)
	// rpc GetJgKline(GetSharesKlineReq) returns (GetJgKlineResp){} // 获取机构线
	GetGzKline(ctx context.Context, in *GetSharesKlineReq, opts ...grpc.CallOption) (*GZPeResp, error)
	GetHotHyName(ctx context.Context, in *GetHotHyNameReq, opts ...grpc.CallOption) (*GetHotHyNameResp, error)
	GetYyq(ctx context.Context, in *GetYyqReq, opts ...grpc.CallOption) (*GetYyqResp, error)
	// //////////////////////////////////////////////////////////////
	// ///////////////////////名人堂////////////////////////////
	GetMrtList(ctx context.Context, in *GetMrtListReq, opts ...grpc.CallOption) (*GetMrtListResp, error)
	GetMrtCode(ctx context.Context, in *GetMrtCodeReq, opts ...grpc.CallOption) (*GetMrtCodeResp, error)
	UpsetMrtCode(ctx context.Context, in *UpsetMrtCodeReq, opts ...grpc.CallOption) (*common.Empty, error)
	GetMrtDetail(ctx context.Context, in *GetMrtDetailReq, opts ...grpc.CallOption) (*GetMrtDetailResp, error)
	// //////////////////////////////////////////////////////////////
	// //////////////////////////中意榜////////////////////////////////
	GetZybHyKline(ctx context.Context, in *GetZybHyKlineReq, opts ...grpc.CallOption) (*GetZybHyKlineResp, error)
}

type sharesClient struct {
	cc client.Client
}

// GetSharesName get client name(package.class)
func GetSharesName() string {
	return "shares.shares"
}

// GetSharesClient get client by clientname
func GetSharesClient() SharesClient {
	cc := micro.GetClient(GetSharesName())
	return &sharesClient{cc}
}

// GetSharesClientByName get client by custom name
func GetSharesClientByName(name string) SharesClient {
	cc := micro.GetClient(name)
	return &sharesClient{cc}
}

func NewSharesClient(cc client.Client) SharesClient {
	return &sharesClient{cc}
}

func (c *sharesClient) GetGroup(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetGroupResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetGroupResp)
	err = conn.Invoke(ctx, "/shares.shares/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetMyGroup(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*GetMyGroupResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetMyGroupResp)
	err = conn.Invoke(ctx, "/shares.shares/GetMyGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) UpsetGroupCode(ctx context.Context, in *UpsetGroupCodeReq, opts ...grpc.CallOption) (*common.Empty, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(common.Empty)
	err = conn.Invoke(ctx, "/shares.shares/UpsetGroupCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(SearchResp)
	err = conn.Invoke(ctx, "/shares.shares/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) Gets(ctx context.Context, in *GetsReq, opts ...grpc.CallOption) (*GetsResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetsResp)
	err = conn.Invoke(ctx, "/shares.shares/Gets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetAllCodeName(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetAllCodeNameResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetAllCodeNameResp)
	err = conn.Invoke(ctx, "/shares.shares/GetAllCodeName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) AddMyCode(ctx context.Context, in *AddMyCodeReq, opts ...grpc.CallOption) (*AddMyCodeResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(AddMyCodeResp)
	err = conn.Invoke(ctx, "/shares.shares/AddMyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetMyCode(ctx context.Context, in *GetMyCodeReq, opts ...grpc.CallOption) (*GetMyCodeResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetMyCodeResp)
	err = conn.Invoke(ctx, "/shares.shares/GetMyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetMsg(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetMsgResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetMsgResp)
	err = conn.Invoke(ctx, "/shares.shares/GetMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) HaveNewMsg(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*HaveNewMsgResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(HaveNewMsgResp)
	err = conn.Invoke(ctx, "/shares.shares/HaveNewMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) DeleteMyCode(ctx context.Context, in *DeleteMyCodeReq, opts ...grpc.CallOption) (*common.Empty, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(common.Empty)
	err = conn.Invoke(ctx, "/shares.shares/DeleteMyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) AddGroup(ctx context.Context, in *AddGroupReq, opts ...grpc.CallOption) (*common.Empty, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(common.Empty)
	err = conn.Invoke(ctx, "/shares.shares/AddGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetDay(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*GetDayResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetDayResp)
	err = conn.Invoke(ctx, "/shares.shares/GetDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetVip(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*GetDayResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetDayResp)
	err = conn.Invoke(ctx, "/shares.shares/GetVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetFl(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*GetDayResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetDayResp)
	err = conn.Invoke(ctx, "/shares.shares/GetFl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetUp(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*GetDayResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetDayResp)
	err = conn.Invoke(ctx, "/shares.shares/GetUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetHejjw(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetHejjwResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetHejjwResp)
	err = conn.Invoke(ctx, "/shares.shares/GetHejjw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetDailyCheck(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetDailyCheckResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetDailyCheckResp)
	err = conn.Invoke(ctx, "/shares.shares/GetDailyCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetClmx(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetClmxResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetClmxResp)
	err = conn.Invoke(ctx, "/shares.shares/GetClmx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetMyYd(ctx context.Context, in *GetMyYdReq, opts ...grpc.CallOption) (*GetMyYdResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetMyYdResp)
	err = conn.Invoke(ctx, "/shares.shares/GetMyYd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetHyRm(ctx context.Context, in *GetHyRmReq, opts ...grpc.CallOption) (*GetHyRmResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetHyRmResp)
	err = conn.Invoke(ctx, "/shares.shares/GetHyRm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetMyTeam(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetMyTeamResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetMyTeamResp)
	err = conn.Invoke(ctx, "/shares.shares/GetMyTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetMyTeamDetail(ctx context.Context, in *GetMyTeamDetailReq, opts ...grpc.CallOption) (*GetMyTeamDetailResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetMyTeamDetailResp)
	err = conn.Invoke(ctx, "/shares.shares/GetMyTeamDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetHyMmadd(ctx context.Context, in *GetHyMmaddReq, opts ...grpc.CallOption) (*GetHyMmaddResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetHyMmaddResp)
	err = conn.Invoke(ctx, "/shares.shares/GetHyMmadd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetHyZyb(ctx context.Context, in *GetHyMmaddReq, opts ...grpc.CallOption) (*GetHyMmaddResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetHyMmaddResp)
	err = conn.Invoke(ctx, "/shares.shares/GetHyZyb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetSharesKline(ctx context.Context, in *GetSharesKlineReq, opts ...grpc.CallOption) (*GetSharesKlineResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetSharesKlineResp)
	err = conn.Invoke(ctx, "/shares.shares/GetSharesKline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetFundKline(ctx context.Context, in *GetSharesKlineReq, opts ...grpc.CallOption) (*GetFundKlineResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetFundKlineResp)
	err = conn.Invoke(ctx, "/shares.shares/GetFundKline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetGzKline(ctx context.Context, in *GetSharesKlineReq, opts ...grpc.CallOption) (*GZPeResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GZPeResp)
	err = conn.Invoke(ctx, "/shares.shares/GetGzKline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetHotHyName(ctx context.Context, in *GetHotHyNameReq, opts ...grpc.CallOption) (*GetHotHyNameResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetHotHyNameResp)
	err = conn.Invoke(ctx, "/shares.shares/GetHotHyName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetYyq(ctx context.Context, in *GetYyqReq, opts ...grpc.CallOption) (*GetYyqResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetYyqResp)
	err = conn.Invoke(ctx, "/shares.shares/GetYyq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetMrtList(ctx context.Context, in *GetMrtListReq, opts ...grpc.CallOption) (*GetMrtListResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetMrtListResp)
	err = conn.Invoke(ctx, "/shares.shares/GetMrtList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetMrtCode(ctx context.Context, in *GetMrtCodeReq, opts ...grpc.CallOption) (*GetMrtCodeResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetMrtCodeResp)
	err = conn.Invoke(ctx, "/shares.shares/GetMrtCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) UpsetMrtCode(ctx context.Context, in *UpsetMrtCodeReq, opts ...grpc.CallOption) (*common.Empty, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(common.Empty)
	err = conn.Invoke(ctx, "/shares.shares/UpsetMrtCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetMrtDetail(ctx context.Context, in *GetMrtDetailReq, opts ...grpc.CallOption) (*GetMrtDetailResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetMrtDetailResp)
	err = conn.Invoke(ctx, "/shares.shares/GetMrtDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetZybHyKline(ctx context.Context, in *GetZybHyKlineReq, opts ...grpc.CallOption) (*GetZybHyKlineResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetZybHyKlineResp)
	err = conn.Invoke(ctx, "/shares.shares/GetZybHyKline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SharesServer is the server API for Shares service.
type SharesServer interface {
	// GetGroup 获取分组信息
	GetGroup(context.Context, *common.Empty) (*GetGroupResp, error)
	// GetMyGroup 获取分组信息
	GetMyGroup(context.Context, *CodeReq) (*GetMyGroupResp, error)
	// UpsetGroupCode 更新分组信息
	UpsetGroupCode(context.Context, *UpsetGroupCodeReq) (*common.Empty, error)
	// Search 搜索
	Search(context.Context, *SearchReq) (*SearchResp, error)
	// Gets 精确查找代码
	Gets(context.Context, *GetsReq) (*GetsResp, error)
	// GetAllCodeName 获取所有中文
	GetAllCodeName(context.Context, *common.Empty) (*GetAllCodeNameResp, error)
	// AddMyCode 给自己添加一个监听
	AddMyCode(context.Context, *AddMyCodeReq) (*AddMyCodeResp, error)
	// GetMyCode 获取我的监听,code不为空获取全部
	GetMyCode(context.Context, *GetMyCodeReq) (*GetMyCodeResp, error)
	// GetMsg 获取消息
	GetMsg(context.Context, *common.Empty) (*GetMsgResp, error)
	// HaveNewMsg 是否有新消息
	HaveNewMsg(context.Context, *common.Empty) (*HaveNewMsgResp, error)
	// DeleteMyCode 删除一个监听
	DeleteMyCode(context.Context, *DeleteMyCodeReq) (*common.Empty, error)
	// AddGroup 添加一个组织
	AddGroup(context.Context, *AddGroupReq) (*common.Empty, error)
	// GetDay 每日精选
	GetDay(context.Context, *CodeReq) (*GetDayResp, error)
	// GetVip vip内参
	GetVip(context.Context, *CodeReq) (*GetDayResp, error)
	// GetFl 放量(打版)
	GetFl(context.Context, *CodeReq) (*GetDayResp, error)
	// GetUp 趋势
	GetUp(context.Context, *CodeReq) (*GetDayResp, error)
	// GetHejjw 获取华尔街见闻
	GetHejjw(context.Context, *common.Empty) (*GetHejjwResp, error)
	// GetDailyCheck 每日复盘笔记
	GetDailyCheck(context.Context, *common.Empty) (*GetDailyCheckResp, error)
	GetClmx(context.Context, *common.Empty) (*GetClmxResp, error)
	GetMyYd(context.Context, *GetMyYdReq) (*GetMyYdResp, error)
	// //////////////////////////////////////////////////////////////
	// /////价值/////////////////////////////////////////////////////
	GetHyRm(context.Context, *GetHyRmReq) (*GetHyRmResp, error)
	GetMyTeam(context.Context, *common.Empty) (*GetMyTeamResp, error)
	GetMyTeamDetail(context.Context, *GetMyTeamDetailReq) (*GetMyTeamDetailResp, error)
	GetHyMmadd(context.Context, *GetHyMmaddReq) (*GetHyMmaddResp, error)
	GetHyZyb(context.Context, *GetHyMmaddReq) (*GetHyMmaddResp, error)
	GetSharesKline(context.Context, *GetSharesKlineReq) (*GetSharesKlineResp, error)
	GetFundKline(context.Context, *GetSharesKlineReq) (*GetFundKlineResp, error)
	// rpc GetJgKline(GetSharesKlineReq) returns (GetJgKlineResp){} // 获取机构线
	GetGzKline(context.Context, *GetSharesKlineReq) (*GZPeResp, error)
	GetHotHyName(context.Context, *GetHotHyNameReq) (*GetHotHyNameResp, error)
	GetYyq(context.Context, *GetYyqReq) (*GetYyqResp, error)
	// //////////////////////////////////////////////////////////////
	// ///////////////////////名人堂////////////////////////////
	GetMrtList(context.Context, *GetMrtListReq) (*GetMrtListResp, error)
	GetMrtCode(context.Context, *GetMrtCodeReq) (*GetMrtCodeResp, error)
	UpsetMrtCode(context.Context, *UpsetMrtCodeReq) (*common.Empty, error)
	GetMrtDetail(context.Context, *GetMrtDetailReq) (*GetMrtDetailResp, error)
	// //////////////////////////////////////////////////////////////
	// //////////////////////////中意榜////////////////////////////////
	GetZybHyKline(context.Context, *GetZybHyKlineReq) (*GetZybHyKlineResp, error)
}

// UnimplementedSharesServer can be embedded to have forward compatible implementations.
type UnimplementedSharesServer struct {
}

func (*UnimplementedSharesServer) GetGroup(context.Context, *common.Empty) (*GetGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (*UnimplementedSharesServer) GetMyGroup(context.Context, *CodeReq) (*GetMyGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyGroup not implemented")
}
func (*UnimplementedSharesServer) UpsetGroupCode(context.Context, *UpsetGroupCodeReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsetGroupCode not implemented")
}
func (*UnimplementedSharesServer) Search(context.Context, *SearchReq) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedSharesServer) Gets(context.Context, *GetsReq) (*GetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gets not implemented")
}
func (*UnimplementedSharesServer) GetAllCodeName(context.Context, *common.Empty) (*GetAllCodeNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCodeName not implemented")
}
func (*UnimplementedSharesServer) AddMyCode(context.Context, *AddMyCodeReq) (*AddMyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMyCode not implemented")
}
func (*UnimplementedSharesServer) GetMyCode(context.Context, *GetMyCodeReq) (*GetMyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyCode not implemented")
}
func (*UnimplementedSharesServer) GetMsg(context.Context, *common.Empty) (*GetMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsg not implemented")
}
func (*UnimplementedSharesServer) HaveNewMsg(context.Context, *common.Empty) (*HaveNewMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HaveNewMsg not implemented")
}
func (*UnimplementedSharesServer) DeleteMyCode(context.Context, *DeleteMyCodeReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMyCode not implemented")
}
func (*UnimplementedSharesServer) AddGroup(context.Context, *AddGroupReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroup not implemented")
}
func (*UnimplementedSharesServer) GetDay(context.Context, *CodeReq) (*GetDayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDay not implemented")
}
func (*UnimplementedSharesServer) GetVip(context.Context, *CodeReq) (*GetDayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVip not implemented")
}
func (*UnimplementedSharesServer) GetFl(context.Context, *CodeReq) (*GetDayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFl not implemented")
}
func (*UnimplementedSharesServer) GetUp(context.Context, *CodeReq) (*GetDayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUp not implemented")
}
func (*UnimplementedSharesServer) GetHejjw(context.Context, *common.Empty) (*GetHejjwResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHejjw not implemented")
}
func (*UnimplementedSharesServer) GetDailyCheck(context.Context, *common.Empty) (*GetDailyCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyCheck not implemented")
}
func (*UnimplementedSharesServer) GetClmx(context.Context, *common.Empty) (*GetClmxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClmx not implemented")
}
func (*UnimplementedSharesServer) GetMyYd(context.Context, *GetMyYdReq) (*GetMyYdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyYd not implemented")
}
func (*UnimplementedSharesServer) GetHyRm(context.Context, *GetHyRmReq) (*GetHyRmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHyRm not implemented")
}
func (*UnimplementedSharesServer) GetMyTeam(context.Context, *common.Empty) (*GetMyTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyTeam not implemented")
}
func (*UnimplementedSharesServer) GetMyTeamDetail(context.Context, *GetMyTeamDetailReq) (*GetMyTeamDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyTeamDetail not implemented")
}
func (*UnimplementedSharesServer) GetHyMmadd(context.Context, *GetHyMmaddReq) (*GetHyMmaddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHyMmadd not implemented")
}
func (*UnimplementedSharesServer) GetHyZyb(context.Context, *GetHyMmaddReq) (*GetHyMmaddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHyZyb not implemented")
}
func (*UnimplementedSharesServer) GetSharesKline(context.Context, *GetSharesKlineReq) (*GetSharesKlineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSharesKline not implemented")
}
func (*UnimplementedSharesServer) GetFundKline(context.Context, *GetSharesKlineReq) (*GetFundKlineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFundKline not implemented")
}
func (*UnimplementedSharesServer) GetGzKline(context.Context, *GetSharesKlineReq) (*GZPeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGzKline not implemented")
}
func (*UnimplementedSharesServer) GetHotHyName(context.Context, *GetHotHyNameReq) (*GetHotHyNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotHyName not implemented")
}
func (*UnimplementedSharesServer) GetYyq(context.Context, *GetYyqReq) (*GetYyqResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYyq not implemented")
}
func (*UnimplementedSharesServer) GetMrtList(context.Context, *GetMrtListReq) (*GetMrtListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMrtList not implemented")
}
func (*UnimplementedSharesServer) GetMrtCode(context.Context, *GetMrtCodeReq) (*GetMrtCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMrtCode not implemented")
}
func (*UnimplementedSharesServer) UpsetMrtCode(context.Context, *UpsetMrtCodeReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsetMrtCode not implemented")
}
func (*UnimplementedSharesServer) GetMrtDetail(context.Context, *GetMrtDetailReq) (*GetMrtDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMrtDetail not implemented")
}
func (*UnimplementedSharesServer) GetZybHyKline(context.Context, *GetZybHyKlineReq) (*GetZybHyKlineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZybHyKline not implemented")
}

func RegisterSharesServer(s server.Server, srv SharesServer) {
	s.GetServer().RegisterService(&_Shares_serviceDesc, srv)
}

func _Shares_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetGroup(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetMyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetMyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetMyGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetMyGroup(ctx, req.(*CodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_UpsetGroupCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsetGroupCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).UpsetGroupCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/UpsetGroupCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).UpsetGroupCode(ctx, req.(*UpsetGroupCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).Search(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_Gets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).Gets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/Gets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).Gets(ctx, req.(*GetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetAllCodeName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetAllCodeName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetAllCodeName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetAllCodeName(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_AddMyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).AddMyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/AddMyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).AddMyCode(ctx, req.(*AddMyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetMyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetMyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetMyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetMyCode(ctx, req.(*GetMyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetMsg(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_HaveNewMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).HaveNewMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/HaveNewMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).HaveNewMsg(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_DeleteMyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).DeleteMyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/DeleteMyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).DeleteMyCode(ctx, req.(*DeleteMyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/AddGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).AddGroup(ctx, req.(*AddGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetDay(ctx, req.(*CodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetVip(ctx, req.(*CodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetFl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetFl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetFl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetFl(ctx, req.(*CodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetUp(ctx, req.(*CodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetHejjw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetHejjw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetHejjw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetHejjw(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetDailyCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetDailyCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetDailyCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetDailyCheck(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetClmx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetClmx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetClmx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetClmx(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetMyYd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyYdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetMyYd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetMyYd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetMyYd(ctx, req.(*GetMyYdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetHyRm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHyRmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetHyRm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetHyRm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetHyRm(ctx, req.(*GetHyRmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetMyTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetMyTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetMyTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetMyTeam(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetMyTeamDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyTeamDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetMyTeamDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetMyTeamDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetMyTeamDetail(ctx, req.(*GetMyTeamDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetHyMmadd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHyMmaddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetHyMmadd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetHyMmadd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetHyMmadd(ctx, req.(*GetHyMmaddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetHyZyb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHyMmaddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetHyZyb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetHyZyb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetHyZyb(ctx, req.(*GetHyMmaddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetSharesKline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSharesKlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetSharesKline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetSharesKline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetSharesKline(ctx, req.(*GetSharesKlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetFundKline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSharesKlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetFundKline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetFundKline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetFundKline(ctx, req.(*GetSharesKlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetGzKline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSharesKlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetGzKline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetGzKline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetGzKline(ctx, req.(*GetSharesKlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetHotHyName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotHyNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetHotHyName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetHotHyName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetHotHyName(ctx, req.(*GetHotHyNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetYyq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetYyqReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetYyq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetYyq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetYyq(ctx, req.(*GetYyqReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetMrtList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMrtListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetMrtList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetMrtList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetMrtList(ctx, req.(*GetMrtListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetMrtCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMrtCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetMrtCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetMrtCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetMrtCode(ctx, req.(*GetMrtCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_UpsetMrtCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsetMrtCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).UpsetMrtCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/UpsetMrtCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).UpsetMrtCode(ctx, req.(*UpsetMrtCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetMrtDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMrtDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetMrtDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetMrtDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetMrtDetail(ctx, req.(*GetMrtDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetZybHyKline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetZybHyKlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetZybHyKline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.shares/GetZybHyKline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetZybHyKline(ctx, req.(*GetZybHyKlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Shares_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shares.shares",
	HandlerType: (*SharesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroup",
			Handler:    _Shares_GetGroup_Handler,
		},
		{
			MethodName: "GetMyGroup",
			Handler:    _Shares_GetMyGroup_Handler,
		},
		{
			MethodName: "UpsetGroupCode",
			Handler:    _Shares_UpsetGroupCode_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Shares_Search_Handler,
		},
		{
			MethodName: "Gets",
			Handler:    _Shares_Gets_Handler,
		},
		{
			MethodName: "GetAllCodeName",
			Handler:    _Shares_GetAllCodeName_Handler,
		},
		{
			MethodName: "AddMyCode",
			Handler:    _Shares_AddMyCode_Handler,
		},
		{
			MethodName: "GetMyCode",
			Handler:    _Shares_GetMyCode_Handler,
		},
		{
			MethodName: "GetMsg",
			Handler:    _Shares_GetMsg_Handler,
		},
		{
			MethodName: "HaveNewMsg",
			Handler:    _Shares_HaveNewMsg_Handler,
		},
		{
			MethodName: "DeleteMyCode",
			Handler:    _Shares_DeleteMyCode_Handler,
		},
		{
			MethodName: "AddGroup",
			Handler:    _Shares_AddGroup_Handler,
		},
		{
			MethodName: "GetDay",
			Handler:    _Shares_GetDay_Handler,
		},
		{
			MethodName: "GetVip",
			Handler:    _Shares_GetVip_Handler,
		},
		{
			MethodName: "GetFl",
			Handler:    _Shares_GetFl_Handler,
		},
		{
			MethodName: "GetUp",
			Handler:    _Shares_GetUp_Handler,
		},
		{
			MethodName: "GetHejjw",
			Handler:    _Shares_GetHejjw_Handler,
		},
		{
			MethodName: "GetDailyCheck",
			Handler:    _Shares_GetDailyCheck_Handler,
		},
		{
			MethodName: "GetClmx",
			Handler:    _Shares_GetClmx_Handler,
		},
		{
			MethodName: "GetMyYd",
			Handler:    _Shares_GetMyYd_Handler,
		},
		{
			MethodName: "GetHyRm",
			Handler:    _Shares_GetHyRm_Handler,
		},
		{
			MethodName: "GetMyTeam",
			Handler:    _Shares_GetMyTeam_Handler,
		},
		{
			MethodName: "GetMyTeamDetail",
			Handler:    _Shares_GetMyTeamDetail_Handler,
		},
		{
			MethodName: "GetHyMmadd",
			Handler:    _Shares_GetHyMmadd_Handler,
		},
		{
			MethodName: "GetHyZyb",
			Handler:    _Shares_GetHyZyb_Handler,
		},
		{
			MethodName: "GetSharesKline",
			Handler:    _Shares_GetSharesKline_Handler,
		},
		{
			MethodName: "GetFundKline",
			Handler:    _Shares_GetFundKline_Handler,
		},
		{
			MethodName: "GetGzKline",
			Handler:    _Shares_GetGzKline_Handler,
		},
		{
			MethodName: "GetHotHyName",
			Handler:    _Shares_GetHotHyName_Handler,
		},
		{
			MethodName: "GetYyq",
			Handler:    _Shares_GetYyq_Handler,
		},
		{
			MethodName: "GetMrtList",
			Handler:    _Shares_GetMrtList_Handler,
		},
		{
			MethodName: "GetMrtCode",
			Handler:    _Shares_GetMrtCode_Handler,
		},
		{
			MethodName: "UpsetMrtCode",
			Handler:    _Shares_UpsetMrtCode_Handler,
		},
		{
			MethodName: "GetMrtDetail",
			Handler:    _Shares_GetMrtDetail_Handler,
		},
		{
			MethodName: "GetZybHyKline",
			Handler:    _Shares_GetZybHyKline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shares/shares.proto",
}
