// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shares

import (
	context "context"
	micro "github.com/gmsec/micro"
	client "github.com/gmsec/micro/client"
	server "github.com/gmsec/micro/server"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface
var _ server.Server
var _ client.Client
var _ micro.Service

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SharesClient is the client API for Shares service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SharesClient interface {
}

type sharesClient struct {
	cc client.Client
}

// GetSharesName get client name(package.class)
func GetSharesName() string {
	return "shares.shares"
}

// GetSharesClient get client by clientname
func GetSharesClient() SharesClient {
	cc := micro.GetClient(GetSharesName())
	return &sharesClient{cc}
}

// GetSharesClientByName get client by custom name
func GetSharesClientByName(name string) SharesClient {
	cc := micro.GetClient(name)
	return &sharesClient{cc}
}

func NewSharesClient(cc client.Client) SharesClient {
	return &sharesClient{cc}
}

// SharesServer is the server API for Shares service.
type SharesServer interface {
}

// UnimplementedSharesServer can be embedded to have forward compatible implementations.
type UnimplementedSharesServer struct {
}

func RegisterSharesServer(s server.Server, srv SharesServer) {
	s.GetServer().RegisterService(&_Shares_serviceDesc, srv)
}

var _Shares_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shares.shares",
	HandlerType: (*SharesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "shares/shares.proto",
}
