// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: shares/shares.proto

package shares

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	common "rpc/common"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SharesInfo 股票信息
type SharesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`             // 股票代码
	SimpleCode string  `protobuf:"bytes,2,opt,name=simpleCode,proto3" json:"simpleCode"` // 股票代码简写
	Ext        string  `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext"`               // 后缀
	Name       string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name"`             // 股票名字
	Price      float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price"`         // 当前价格
	Percent    float64 `protobuf:"fixed64,6,opt,name=percent,proto3" json:"percent"`     // 百分比
	Color      string  `protobuf:"bytes,7,opt,name=color,proto3" json:"color"`           // 颜色
	Img        string  `protobuf:"bytes,8,opt,name=img,proto3" json:"img"`               // 图片地址
	Hy         string  `protobuf:"bytes,9,opt,name=hy,proto3" json:"hy"`                 // 行业板块
	Attach     string  `protobuf:"bytes,10,opt,name=attach,proto3" json:"attach"`        // 附加
	Peg        string  `protobuf:"bytes,11,opt,name=peg,proto3" json:"peg"`              // peg信息
}

func (x *SharesInfo) Reset() {
	*x = SharesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharesInfo) ProtoMessage() {}

func (x *SharesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharesInfo.ProtoReflect.Descriptor instead.
func (*SharesInfo) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{0}
}

func (x *SharesInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SharesInfo) GetSimpleCode() string {
	if x != nil {
		return x.SimpleCode
	}
	return ""
}

func (x *SharesInfo) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

func (x *SharesInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SharesInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SharesInfo) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *SharesInfo) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *SharesInfo) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *SharesInfo) GetHy() string {
	if x != nil {
		return x.Hy
	}
	return ""
}

func (x *SharesInfo) GetAttach() string {
	if x != nil {
		return x.Attach
	}
	return ""
}

func (x *SharesInfo) GetPeg() string {
	if x != nil {
		return x.Peg
	}
	return ""
}

// SharesInfoDetails 股票详细信息
type SharesInfoDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`                    // 股票代码
	SimpleCode   string  `protobuf:"bytes,2,opt,name=simpleCode,proto3" json:"simpleCode"`        // 股票代码简写
	Ext          string  `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext"`                      // 后缀
	Name         string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name"`                    // 股票名字
	Price        float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price"`                // 当前价格
	Percent      float64 `protobuf:"fixed64,6,opt,name=percent,proto3" json:"percent"`            // 百分比
	Color        string  `protobuf:"bytes,7,opt,name=color,proto3" json:"color"`                  // 颜色
	Img          string  `protobuf:"bytes,8,opt,name=img,proto3" json:"img"`                      // 图片地址
	Volume       float64 `protobuf:"fixed64,9,opt,name=volume,proto3" json:"volume"`              // 成交量（手）
	Turnover     float64 `protobuf:"fixed64,10,opt,name=turnover,proto3" json:"turnover"`         // 成交额（万）
	TurnoverRate float64 `protobuf:"fixed64,11,opt,name=turnoverRate,proto3" json:"turnoverRate"` // 换手率
	Pe           float64 `protobuf:"fixed64,12,opt,name=pe,proto3" json:"pe"`                     // 市盈率
	Pb           float64 `protobuf:"fixed64,13,opt,name=pb,proto3" json:"pb"`                     // 市净率
	Total        float64 `protobuf:"fixed64,15,opt,name=total,proto3" json:"total"`               // 流通市值
	Cap          float64 `protobuf:"fixed64,16,opt,name=cap,proto3" json:"cap"`                   // 总市值
	Zljlr        float64 `protobuf:"fixed64,17,opt,name=zljlr,proto3" json:"zljlr"`               // 主力资金净流入
	OpenPrice    float64 `protobuf:"fixed64,18,opt,name=openPrice,proto3" json:"openPrice"`       // 开盘价
	ClosePrice   float64 `protobuf:"fixed64,19,opt,name=closePrice,proto3" json:"closePrice"`     // 收盘价
	Macd         float64 `protobuf:"fixed64,20,opt,name=macd,proto3" json:"macd"`                 // macd
	Dif          float64 `protobuf:"fixed64,21,opt,name=dif,proto3" json:"dif"`                   // 快线
	Dea          float64 `protobuf:"fixed64,22,opt,name=dea,proto3" json:"dea"`                   // 慢线
	Max          float64 `protobuf:"fixed64,23,opt,name=max,proto3" json:"max"`                   // 当日最高点
	Min          float64 `protobuf:"fixed64,24,opt,name=min,proto3" json:"min"`                   // 当日最低
}

func (x *SharesInfoDetails) Reset() {
	*x = SharesInfoDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharesInfoDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharesInfoDetails) ProtoMessage() {}

func (x *SharesInfoDetails) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharesInfoDetails.ProtoReflect.Descriptor instead.
func (*SharesInfoDetails) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{1}
}

func (x *SharesInfoDetails) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SharesInfoDetails) GetSimpleCode() string {
	if x != nil {
		return x.SimpleCode
	}
	return ""
}

func (x *SharesInfoDetails) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

func (x *SharesInfoDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SharesInfoDetails) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SharesInfoDetails) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *SharesInfoDetails) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *SharesInfoDetails) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *SharesInfoDetails) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *SharesInfoDetails) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *SharesInfoDetails) GetTurnoverRate() float64 {
	if x != nil {
		return x.TurnoverRate
	}
	return 0
}

func (x *SharesInfoDetails) GetPe() float64 {
	if x != nil {
		return x.Pe
	}
	return 0
}

func (x *SharesInfoDetails) GetPb() float64 {
	if x != nil {
		return x.Pb
	}
	return 0
}

func (x *SharesInfoDetails) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SharesInfoDetails) GetCap() float64 {
	if x != nil {
		return x.Cap
	}
	return 0
}

func (x *SharesInfoDetails) GetZljlr() float64 {
	if x != nil {
		return x.Zljlr
	}
	return 0
}

func (x *SharesInfoDetails) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *SharesInfoDetails) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *SharesInfoDetails) GetMacd() float64 {
	if x != nil {
		return x.Macd
	}
	return 0
}

func (x *SharesInfoDetails) GetDif() float64 {
	if x != nil {
		return x.Dif
	}
	return 0
}

func (x *SharesInfoDetails) GetDea() float64 {
	if x != nil {
		return x.Dea
	}
	return 0
}

func (x *SharesInfoDetails) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *SharesInfoDetails) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name"` // 分组名
	List []*SharesInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list"` // 列表
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{2}
}

func (x *Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Group) GetList() []*SharesInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// GetGroupResp 请求结构
type GetGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Group `protobuf:"bytes,1,rep,name=list,proto3" json:"list"` // 列表
}

func (x *GetGroupResp) Reset() {
	*x = GetGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupResp) ProtoMessage() {}

func (x *GetGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupResp.ProtoReflect.Descriptor instead.
func (*GetGroupResp) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{3}
}

func (x *GetGroupResp) GetList() []*Group {
	if x != nil {
		return x.List
	}
	return nil
}

// SearchReq 搜索请求
type SearchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"` // 股票代码
	Tag  string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag"`   // 标记(min,daily)
}

func (x *SearchReq) Reset() {
	*x = SearchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchReq) ProtoMessage() {}

func (x *SearchReq) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchReq.ProtoReflect.Descriptor instead.
func (*SearchReq) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{4}
}

func (x *SearchReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SearchReq) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// SearchReq 搜索请求
type SearchResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SharesInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info"` // 返回信息
}

func (x *SearchResp) Reset() {
	*x = SearchResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResp) ProtoMessage() {}

func (x *SearchResp) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResp.ProtoReflect.Descriptor instead.
func (*SearchResp) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{5}
}

func (x *SearchResp) GetInfo() *SharesInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codes []string `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes"` // 股票代码
}

func (x *GetsReq) Reset() {
	*x = GetsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetsReq) ProtoMessage() {}

func (x *GetsReq) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetsReq.ProtoReflect.Descriptor instead.
func (*GetsReq) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{6}
}

func (x *GetsReq) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

// SimpleSharesInfo 股票信息
type SimpleSharesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`         // 股票代码
	Price   float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price"`     // 当前价格
	Percent float64 `protobuf:"fixed64,6,opt,name=percent,proto3" json:"percent"` // 百分比
	Color   string  `protobuf:"bytes,7,opt,name=color,proto3" json:"color"`       // 颜色
}

func (x *SimpleSharesInfo) Reset() {
	*x = SimpleSharesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleSharesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleSharesInfo) ProtoMessage() {}

func (x *SimpleSharesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleSharesInfo.ProtoReflect.Descriptor instead.
func (*SimpleSharesInfo) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{7}
}

func (x *SimpleSharesInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SimpleSharesInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SimpleSharesInfo) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *SimpleSharesInfo) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type GetsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SimpleSharesInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list"` // 列表(只返回价格相关的信息(code,price,percent,color))
}

func (x *GetsResp) Reset() {
	*x = GetsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetsResp) ProtoMessage() {}

func (x *GetsResp) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetsResp.ProtoReflect.Descriptor instead.
func (*GetsResp) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{8}
}

func (x *GetsResp) GetList() []*SimpleSharesInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type CodeNameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`   // 股票代码
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`   // 股票名字
	SName string `protobuf:"bytes,3,opt,name=sName,proto3" json:"sName"` // 股票简写
}

func (x *CodeNameInfo) Reset() {
	*x = CodeNameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeNameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeNameInfo) ProtoMessage() {}

func (x *CodeNameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeNameInfo.ProtoReflect.Descriptor instead.
func (*CodeNameInfo) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{9}
}

func (x *CodeNameInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CodeNameInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CodeNameInfo) GetSName() string {
	if x != nil {
		return x.SName
	}
	return ""
}

type GetAllCodeNameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CodeNameInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"` // 代码列表
}

func (x *GetAllCodeNameResp) Reset() {
	*x = GetAllCodeNameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllCodeNameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCodeNameResp) ProtoMessage() {}

func (x *GetAllCodeNameResp) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCodeNameResp.ProtoReflect.Descriptor instead.
func (*GetAllCodeNameResp) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{10}
}

func (x *GetAllCodeNameResp) GetList() []*CodeNameInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type AddMyCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`                  // 股票代码
	Price       float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price"`              // 当前价格
	Kdj         bool    `protobuf:"varint,3,opt,name=kdj,proto3" json:"kdj"`                   // 日线金叉提醒
	Kdj20       bool    `protobuf:"varint,4,opt,name=kdj20,proto3" json:"kdj20"`               // 20日线提醒
	Surge       bool    `protobuf:"varint,5,opt,name=surge,proto3" json:"surge"`               // 盘中急涨提醒
	Slump       bool    `protobuf:"varint,6,opt,name=slump,proto3" json:"slump"`               // 盘中急跌提醒
	Ai          bool    `protobuf:"varint,7,opt,name=ai,proto3" json:"ai"`                     // AI智能提醒
	Public      bool    `protobuf:"varint,8,opt,name=public,proto3" json:"public"`             // 是否推荐给组织
	Up          float64 `protobuf:"fixed64,9,opt,name=up,proto3" json:"up"`                    // 估价涨到
	Down        float64 `protobuf:"fixed64,10,opt,name=down,proto3" json:"down"`               // 估价跌到
	UpPercent   float64 `protobuf:"fixed64,11,opt,name=upPercent,proto3" json:"upPercent"`     // 涨幅超
	DownPercent float64 `protobuf:"fixed64,12,opt,name=downPercent,proto3" json:"downPercent"` // 跌幅超
	Vaild       bool    `protobuf:"varint,13,opt,name=vaild,proto3" json:"vaild"`              // 是否有效
	// 返回值用
	SimpleCode string  `protobuf:"bytes,14,opt,name=simpleCode,proto3" json:"simpleCode"` // 股票代码简写
	Ext        string  `protobuf:"bytes,15,opt,name=ext,proto3" json:"ext"`               // 后缀
	Name       string  `protobuf:"bytes,16,opt,name=name,proto3" json:"name"`             // 股票名字
	Percent    float64 `protobuf:"fixed64,17,opt,name=percent,proto3" json:"percent"`     // 百分比
	Color      string  `protobuf:"bytes,18,opt,name=color,proto3" json:"color"`           // 颜色
}

func (x *AddMyCodeReq) Reset() {
	*x = AddMyCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMyCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMyCodeReq) ProtoMessage() {}

func (x *AddMyCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMyCodeReq.ProtoReflect.Descriptor instead.
func (*AddMyCodeReq) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{11}
}

func (x *AddMyCodeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AddMyCodeReq) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AddMyCodeReq) GetKdj() bool {
	if x != nil {
		return x.Kdj
	}
	return false
}

func (x *AddMyCodeReq) GetKdj20() bool {
	if x != nil {
		return x.Kdj20
	}
	return false
}

func (x *AddMyCodeReq) GetSurge() bool {
	if x != nil {
		return x.Surge
	}
	return false
}

func (x *AddMyCodeReq) GetSlump() bool {
	if x != nil {
		return x.Slump
	}
	return false
}

func (x *AddMyCodeReq) GetAi() bool {
	if x != nil {
		return x.Ai
	}
	return false
}

func (x *AddMyCodeReq) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *AddMyCodeReq) GetUp() float64 {
	if x != nil {
		return x.Up
	}
	return 0
}

func (x *AddMyCodeReq) GetDown() float64 {
	if x != nil {
		return x.Down
	}
	return 0
}

func (x *AddMyCodeReq) GetUpPercent() float64 {
	if x != nil {
		return x.UpPercent
	}
	return 0
}

func (x *AddMyCodeReq) GetDownPercent() float64 {
	if x != nil {
		return x.DownPercent
	}
	return 0
}

func (x *AddMyCodeReq) GetVaild() bool {
	if x != nil {
		return x.Vaild
	}
	return false
}

func (x *AddMyCodeReq) GetSimpleCode() string {
	if x != nil {
		return x.SimpleCode
	}
	return ""
}

func (x *AddMyCodeReq) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

func (x *AddMyCodeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddMyCodeReq) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *AddMyCodeReq) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type AddMyCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status"` // 状态是否成功
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`        // 消息
}

func (x *AddMyCodeResp) Reset() {
	*x = AddMyCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMyCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMyCodeResp) ProtoMessage() {}

func (x *AddMyCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMyCodeResp.ProtoReflect.Descriptor instead.
func (*AddMyCodeResp) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{12}
}

func (x *AddMyCodeResp) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *AddMyCodeResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetMyCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"` // 股票代码
}

func (x *GetMyCodeReq) Reset() {
	*x = GetMyCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyCodeReq) ProtoMessage() {}

func (x *GetMyCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyCodeReq.ProtoReflect.Descriptor instead.
func (*GetMyCodeReq) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{13}
}

func (x *GetMyCodeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type AddMyCodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`                  // 股票代码
	Price       float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price"`              // 当前价格
	Kdj         bool    `protobuf:"varint,3,opt,name=kdj,proto3" json:"kdj"`                   // 日线金叉提醒
	Surge       bool    `protobuf:"varint,4,opt,name=surge,proto3" json:"surge"`               // 盘中急涨提醒
	Slump       bool    `protobuf:"varint,5,opt,name=slump,proto3" json:"slump"`               // 盘中急跌提醒
	Ai          bool    `protobuf:"varint,6,opt,name=ai,proto3" json:"ai"`                     // AI智能提醒
	Public      bool    `protobuf:"varint,7,opt,name=public,proto3" json:"public"`             // 是否推荐给组织
	Up          float64 `protobuf:"fixed64,8,opt,name=up,proto3" json:"up"`                    // 估价涨到
	Down        float64 `protobuf:"fixed64,9,opt,name=down,proto3" json:"down"`                // 估价跌到
	UpPercent   float64 `protobuf:"fixed64,10,opt,name=upPercent,proto3" json:"upPercent"`     // 涨幅超
	DownPercent float64 `protobuf:"fixed64,11,opt,name=downPercent,proto3" json:"downPercent"` // 跌幅超
}

func (x *AddMyCodeInfo) Reset() {
	*x = AddMyCodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMyCodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMyCodeInfo) ProtoMessage() {}

func (x *AddMyCodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMyCodeInfo.ProtoReflect.Descriptor instead.
func (*AddMyCodeInfo) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{14}
}

func (x *AddMyCodeInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AddMyCodeInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AddMyCodeInfo) GetKdj() bool {
	if x != nil {
		return x.Kdj
	}
	return false
}

func (x *AddMyCodeInfo) GetSurge() bool {
	if x != nil {
		return x.Surge
	}
	return false
}

func (x *AddMyCodeInfo) GetSlump() bool {
	if x != nil {
		return x.Slump
	}
	return false
}

func (x *AddMyCodeInfo) GetAi() bool {
	if x != nil {
		return x.Ai
	}
	return false
}

func (x *AddMyCodeInfo) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *AddMyCodeInfo) GetUp() float64 {
	if x != nil {
		return x.Up
	}
	return 0
}

func (x *AddMyCodeInfo) GetDown() float64 {
	if x != nil {
		return x.Down
	}
	return 0
}

func (x *AddMyCodeInfo) GetUpPercent() float64 {
	if x != nil {
		return x.UpPercent
	}
	return 0
}

func (x *AddMyCodeInfo) GetDownPercent() float64 {
	if x != nil {
		return x.DownPercent
	}
	return 0
}

type GetMyCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*AddMyCodeReq `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *GetMyCodeResp) Reset() {
	*x = GetMyCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyCodeResp) ProtoMessage() {}

func (x *GetMyCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyCodeResp.ProtoReflect.Descriptor instead.
func (*GetMyCodeResp) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{15}
}

func (x *GetMyCodeResp) GetList() []*AddMyCodeReq {
	if x != nil {
		return x.List
	}
	return nil
}

type Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`             // 股票代码
	SimpleCode string  `protobuf:"bytes,2,opt,name=simpleCode,proto3" json:"simpleCode"` // 股票代码简写
	Ext        string  `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext"`               // 后缀
	Name       string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name"`             // 股票名字
	Price      float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price"`         // 当前价格
	Key        string  `protobuf:"bytes,6,opt,name=key,proto3" json:"key"`               // 标签
	Desc       string  `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc"`             // 描述
	Percent    float64 `protobuf:"fixed64,8,opt,name=percent,proto3" json:"percent"`     // 百分比
	Color      string  `protobuf:"bytes,9,opt,name=color,proto3" json:"color"`           // 颜色
	Now        string  `protobuf:"bytes,10,opt,name=now,proto3" json:"now"`              // 当前时间
	Tag        string  `protobuf:"bytes,11,opt,name=tag,proto3" json:"tag"`              // 标记(min,daily)
}

func (x *Msg) Reset() {
	*x = Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msg) ProtoMessage() {}

func (x *Msg) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msg.ProtoReflect.Descriptor instead.
func (*Msg) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{16}
}

func (x *Msg) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Msg) GetSimpleCode() string {
	if x != nil {
		return x.SimpleCode
	}
	return ""
}

func (x *Msg) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

func (x *Msg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Msg) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Msg) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Msg) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Msg) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *Msg) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Msg) GetNow() string {
	if x != nil {
		return x.Now
	}
	return ""
}

func (x *Msg) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type GetMsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Msg `protobuf:"bytes,1,rep,name=list,proto3" json:"list"` // 消息列表
}

func (x *GetMsgResp) Reset() {
	*x = GetMsgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMsgResp) ProtoMessage() {}

func (x *GetMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMsgResp.ProtoReflect.Descriptor instead.
func (*GetMsgResp) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{17}
}

func (x *GetMsgResp) GetList() []*Msg {
	if x != nil {
		return x.List
	}
	return nil
}

type HaveNewMsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Badge bool `protobuf:"varint,1,opt,name=badge,proto3" json:"badge"` // 是否有新消息
}

func (x *HaveNewMsgResp) Reset() {
	*x = HaveNewMsgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HaveNewMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HaveNewMsgResp) ProtoMessage() {}

func (x *HaveNewMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HaveNewMsgResp.ProtoReflect.Descriptor instead.
func (*HaveNewMsgResp) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{18}
}

func (x *HaveNewMsgResp) GetBadge() bool {
	if x != nil {
		return x.Badge
	}
	return false
}

type DeleteMyCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"` // 股票代码
}

func (x *DeleteMyCodeReq) Reset() {
	*x = DeleteMyCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMyCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMyCodeReq) ProtoMessage() {}

func (x *DeleteMyCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMyCodeReq.ProtoReflect.Descriptor instead.
func (*DeleteMyCodeReq) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteMyCodeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type AddGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key"` // 分组key
}

func (x *AddGroupReq) Reset() {
	*x = AddGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGroupReq) ProtoMessage() {}

func (x *AddGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGroupReq.ProtoReflect.Descriptor instead.
func (*AddGroupReq) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{20}
}

func (x *AddGroupReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type CodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"` // 股票代码
}

func (x *CodeReq) Reset() {
	*x = CodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeReq) ProtoMessage() {}

func (x *CodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeReq.ProtoReflect.Descriptor instead.
func (*CodeReq) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{21}
}

func (x *CodeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetMyGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`           // 股票代码
	GroupName string   `protobuf:"bytes,2,opt,name=groupName,proto3" json:"groupName"` // 分组名
	UserName  string   `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName"`   // 推荐人
	Wi        int32    `protobuf:"varint,4,opt,name=wi,proto3" json:"wi"`              // 权重
	Group     []string `protobuf:"bytes,5,rep,name=group,proto3" json:"group"`         // 我的股票列表
}

func (x *GetMyGroupResp) Reset() {
	*x = GetMyGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyGroupResp) ProtoMessage() {}

func (x *GetMyGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyGroupResp.ProtoReflect.Descriptor instead.
func (*GetMyGroupResp) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{22}
}

func (x *GetMyGroupResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetMyGroupResp) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *GetMyGroupResp) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *GetMyGroupResp) GetWi() int32 {
	if x != nil {
		return x.Wi
	}
	return 0
}

func (x *GetMyGroupResp) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

type UpsetGroupCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`           // 股票代码
	GroupName string `protobuf:"bytes,2,opt,name=groupName,proto3" json:"groupName"` // 分组名
	UserName  string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName"`   // 推荐人
	IsAdd     bool   `protobuf:"varint,4,opt,name=isAdd,proto3" json:"isAdd"`        // 是否添加,false:删除
}

func (x *UpsetGroupCodeReq) Reset() {
	*x = UpsetGroupCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shares_shares_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsetGroupCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsetGroupCodeReq) ProtoMessage() {}

func (x *UpsetGroupCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_shares_shares_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsetGroupCodeReq.ProtoReflect.Descriptor instead.
func (*UpsetGroupCodeReq) Descriptor() ([]byte, []int) {
	return file_shares_shares_proto_rawDescGZIP(), []int{23}
}

func (x *UpsetGroupCodeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpsetGroupCodeReq) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *UpsetGroupCodeReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UpsetGroupCodeReq) GetIsAdd() bool {
	if x != nil {
		return x.IsAdd
	}
	return false
}

var File_shares_shares_proto protoreflect.FileDescriptor

var file_shares_shares_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x1a, 0x1a, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x01, 0x0a, 0x0a, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x68, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x65, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x70, 0x65, 0x67, 0x22, 0x95, 0x04, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x02, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x62, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x02, 0x70, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61,
	0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x7a, 0x6c, 0x6a, 0x6c, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x7a, 0x6c, 0x6a,
	0x6c, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x63, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x6d, 0x61, 0x63, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x66, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x64, 0x69, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x61, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x64, 0x65, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x22, 0x43, 0x0a, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x31, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x31, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x34, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x1f, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x6c,
	0x0a, 0x10, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x38, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x0c, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xa4, 0x03, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x4d, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x64, 0x6a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x64,
	0x6a, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x64, 0x6a, 0x32, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x6b, 0x64, 0x6a, 0x32, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x75, 0x72, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x75, 0x72, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x6c, 0x75, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x6c,
	0x75, 0x6d, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x61, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x75,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x75, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x69, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x69, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x39, 0x0a, 0x0d, 0x41,
	0x64, 0x64, 0x4d, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x22, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x0d, 0x41,
	0x64, 0x64, 0x4d, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x64, 0x6a, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x64, 0x6a, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x75, 0x72, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x75, 0x72, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x6c, 0x75, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73,
	0x6c, 0x75, 0x6d, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x61, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02,
	0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x22, 0x39, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xef, 0x01, 0x0a, 0x03,
	0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x77,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x2d, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x0e,
	0x48, 0x61, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x22, 0x25, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x1f, 0x0a, 0x0b, 0x41,
	0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x1d, 0x0a, 0x07,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x4d, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x77, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x77, 0x69, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x77, 0x0a, 0x11, 0x55, 0x70, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x41, 0x64, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x64, 0x64, 0x32, 0x9b, 0x05, 0x0a, 0x06,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x4d, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0e, 0x55, 0x70, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x2e, 0x55, 0x70,
	0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x31, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x11, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x04, 0x47, 0x65, 0x74, 0x73, 0x12, 0x0f, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x3a, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4d, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x15, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4d,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x4d, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4d, 0x73,
	0x67, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x12, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x48, 0x61, 0x76, 0x65, 0x4e, 0x65,
	0x77, 0x4d, 0x73, 0x67, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x76,
	0x65, 0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x38, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x13, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x72, 0x70, 0x63,
	0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_shares_shares_proto_rawDescOnce sync.Once
	file_shares_shares_proto_rawDescData = file_shares_shares_proto_rawDesc
)

func file_shares_shares_proto_rawDescGZIP() []byte {
	file_shares_shares_proto_rawDescOnce.Do(func() {
		file_shares_shares_proto_rawDescData = protoimpl.X.CompressGZIP(file_shares_shares_proto_rawDescData)
	})
	return file_shares_shares_proto_rawDescData
}

var file_shares_shares_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_shares_shares_proto_goTypes = []interface{}{
	(*SharesInfo)(nil),         // 0: shares.SharesInfo
	(*SharesInfoDetails)(nil),  // 1: shares.SharesInfoDetails
	(*Group)(nil),              // 2: shares.Group
	(*GetGroupResp)(nil),       // 3: shares.GetGroupResp
	(*SearchReq)(nil),          // 4: shares.SearchReq
	(*SearchResp)(nil),         // 5: shares.SearchResp
	(*GetsReq)(nil),            // 6: shares.GetsReq
	(*SimpleSharesInfo)(nil),   // 7: shares.SimpleSharesInfo
	(*GetsResp)(nil),           // 8: shares.GetsResp
	(*CodeNameInfo)(nil),       // 9: shares.CodeNameInfo
	(*GetAllCodeNameResp)(nil), // 10: shares.GetAllCodeNameResp
	(*AddMyCodeReq)(nil),       // 11: shares.AddMyCodeReq
	(*AddMyCodeResp)(nil),      // 12: shares.AddMyCodeResp
	(*GetMyCodeReq)(nil),       // 13: shares.GetMyCodeReq
	(*AddMyCodeInfo)(nil),      // 14: shares.AddMyCodeInfo
	(*GetMyCodeResp)(nil),      // 15: shares.GetMyCodeResp
	(*Msg)(nil),                // 16: shares.Msg
	(*GetMsgResp)(nil),         // 17: shares.GetMsgResp
	(*HaveNewMsgResp)(nil),     // 18: shares.HaveNewMsgResp
	(*DeleteMyCodeReq)(nil),    // 19: shares.DeleteMyCodeReq
	(*AddGroupReq)(nil),        // 20: shares.AddGroupReq
	(*CodeReq)(nil),            // 21: shares.CodeReq
	(*GetMyGroupResp)(nil),     // 22: shares.GetMyGroupResp
	(*UpsetGroupCodeReq)(nil),  // 23: shares.UpsetGroupCodeReq
	(*common.Empty)(nil),       // 24: common.Empty
}
var file_shares_shares_proto_depIdxs = []int32{
	0,  // 0: shares.Group.list:type_name -> shares.SharesInfo
	2,  // 1: shares.GetGroupResp.list:type_name -> shares.Group
	0,  // 2: shares.SearchResp.info:type_name -> shares.SharesInfo
	7,  // 3: shares.GetsResp.list:type_name -> shares.SimpleSharesInfo
	9,  // 4: shares.GetAllCodeNameResp.list:type_name -> shares.CodeNameInfo
	11, // 5: shares.GetMyCodeResp.list:type_name -> shares.AddMyCodeReq
	16, // 6: shares.GetMsgResp.list:type_name -> shares.Msg
	24, // 7: shares.shares.GetGroup:input_type -> common.Empty
	21, // 8: shares.shares.GetMyGroup:input_type -> shares.CodeReq
	23, // 9: shares.shares.UpsetGroupCode:input_type -> shares.UpsetGroupCodeReq
	4,  // 10: shares.shares.Search:input_type -> shares.SearchReq
	6,  // 11: shares.shares.Gets:input_type -> shares.GetsReq
	24, // 12: shares.shares.GetAllCodeName:input_type -> common.Empty
	11, // 13: shares.shares.AddMyCode:input_type -> shares.AddMyCodeReq
	13, // 14: shares.shares.GetMyCode:input_type -> shares.GetMyCodeReq
	24, // 15: shares.shares.GetMsg:input_type -> common.Empty
	24, // 16: shares.shares.HaveNewMsg:input_type -> common.Empty
	19, // 17: shares.shares.DeleteMyCode:input_type -> shares.DeleteMyCodeReq
	20, // 18: shares.shares.AddGroup:input_type -> shares.AddGroupReq
	3,  // 19: shares.shares.GetGroup:output_type -> shares.GetGroupResp
	22, // 20: shares.shares.GetMyGroup:output_type -> shares.GetMyGroupResp
	24, // 21: shares.shares.UpsetGroupCode:output_type -> common.Empty
	5,  // 22: shares.shares.Search:output_type -> shares.SearchResp
	8,  // 23: shares.shares.Gets:output_type -> shares.GetsResp
	10, // 24: shares.shares.GetAllCodeName:output_type -> shares.GetAllCodeNameResp
	12, // 25: shares.shares.AddMyCode:output_type -> shares.AddMyCodeResp
	15, // 26: shares.shares.GetMyCode:output_type -> shares.GetMyCodeResp
	17, // 27: shares.shares.GetMsg:output_type -> shares.GetMsgResp
	18, // 28: shares.shares.HaveNewMsg:output_type -> shares.HaveNewMsgResp
	24, // 29: shares.shares.DeleteMyCode:output_type -> common.Empty
	24, // 30: shares.shares.AddGroup:output_type -> common.Empty
	19, // [19:31] is the sub-list for method output_type
	7,  // [7:19] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_shares_shares_proto_init() }
func file_shares_shares_proto_init() {
	if File_shares_shares_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_shares_shares_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharesInfoDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleSharesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeNameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllCodeNameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMyCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMyCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMyCodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMsgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HaveNewMsgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMyCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shares_shares_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsetGroupCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shares_shares_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_shares_shares_proto_goTypes,
		DependencyIndexes: file_shares_shares_proto_depIdxs,
		MessageInfos:      file_shares_shares_proto_msgTypes,
	}.Build()
	File_shares_shares_proto = out.File
	file_shares_shares_proto_rawDesc = nil
	file_shares_shares_proto_goTypes = nil
	file_shares_shares_proto_depIdxs = nil
}
