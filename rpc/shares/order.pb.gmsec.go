// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shares

import (
	context "context"
	micro "github.com/gmsec/micro"
	client "github.com/gmsec/micro/client"
	server "github.com/gmsec/micro/server"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface
var _ server.Server
var _ client.Client
var _ micro.Service

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderClient interface {
	// PlaceOrder 下单
	GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*GetProductResp, error)
	// PlaceOrder 下单
	PlaceOrder(ctx context.Context, in *PlaceOrderReq, opts ...grpc.CallOption) (*PayResp, error)
	// ReckonFee 计算费用
	ReckonFee(ctx context.Context, in *ReckonFeeReq, opts ...grpc.CallOption) (*ReckonFeeResp, error)
}

type orderClient struct {
	cc client.Client
}

// GetOrderName get client name(package.class)
func GetOrderName() string {
	return "shares.Order"
}

// GetOrderClient get client by clientname
func GetOrderClient() OrderClient {
	cc := micro.GetClient(GetOrderName())
	return &orderClient{cc}
}

// GetOrderClientByName get client by custom name
func GetOrderClientByName(name string) OrderClient {
	cc := micro.GetClient(name)
	return &orderClient{cc}
}

func NewOrderClient(cc client.Client) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*GetProductResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetProductResp)
	err = conn.Invoke(ctx, "/shares.Order/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) PlaceOrder(ctx context.Context, in *PlaceOrderReq, opts ...grpc.CallOption) (*PayResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(PayResp)
	err = conn.Invoke(ctx, "/shares.Order/PlaceOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) ReckonFee(ctx context.Context, in *ReckonFeeReq, opts ...grpc.CallOption) (*ReckonFeeResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(ReckonFeeResp)
	err = conn.Invoke(ctx, "/shares.Order/ReckonFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServer is the server API for Order service.
type OrderServer interface {
	// PlaceOrder 下单
	GetProduct(context.Context, *GetProductReq) (*GetProductResp, error)
	// PlaceOrder 下单
	PlaceOrder(context.Context, *PlaceOrderReq) (*PayResp, error)
	// ReckonFee 计算费用
	ReckonFee(context.Context, *ReckonFeeReq) (*ReckonFeeResp, error)
}

// UnimplementedOrderServer can be embedded to have forward compatible implementations.
type UnimplementedOrderServer struct {
}

func (*UnimplementedOrderServer) GetProduct(context.Context, *GetProductReq) (*GetProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (*UnimplementedOrderServer) PlaceOrder(context.Context, *PlaceOrderReq) (*PayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (*UnimplementedOrderServer) ReckonFee(context.Context, *ReckonFeeReq) (*ReckonFeeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReckonFee not implemented")
}

func RegisterOrderServer(s server.Server, srv OrderServer) {
	s.GetServer().RegisterService(&_Order_serviceDesc, srv)
}

func _Order_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.Order/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetProduct(ctx, req.(*GetProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.Order/PlaceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).PlaceOrder(ctx, req.(*PlaceOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_ReckonFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReckonFeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).ReckonFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.Order/ReckonFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).ReckonFee(ctx, req.(*ReckonFeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Order_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shares.Order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProduct",
			Handler:    _Order_GetProduct_Handler,
		},
		{
			MethodName: "PlaceOrder",
			Handler:    _Order_PlaceOrder_Handler,
		},
		{
			MethodName: "ReckonFee",
			Handler:    _Order_ReckonFee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shares/order.proto",
}
