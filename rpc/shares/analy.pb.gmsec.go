// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shares

import (
	context "context"
	micro "github.com/gmsec/micro"
	client "github.com/gmsec/micro/client"
	server "github.com/gmsec/micro/server"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface
var _ server.Server
var _ client.Client
var _ micro.Service

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AnalyClient is the client API for Analy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnalyClient interface {
	// AnalyCode 分析一直股票
	AnalyCode(ctx context.Context, in *AnalyCodeReq, opts ...grpc.CallOption) (*AnalyCodeResp, error)
}

type analyClient struct {
	cc client.Client
}

// GetAnalyName get client name(package.class)
func GetAnalyName() string {
	return "shares.Analy"
}

// GetAnalyClient get client by clientname
func GetAnalyClient() AnalyClient {
	cc := micro.GetClient(GetAnalyName())
	return &analyClient{cc}
}

// GetAnalyClientByName get client by custom name
func GetAnalyClientByName(name string) AnalyClient {
	cc := micro.GetClient(name)
	return &analyClient{cc}
}

func NewAnalyClient(cc client.Client) AnalyClient {
	return &analyClient{cc}
}

func (c *analyClient) AnalyCode(ctx context.Context, in *AnalyCodeReq, opts ...grpc.CallOption) (*AnalyCodeResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(AnalyCodeResp)
	err = conn.Invoke(ctx, "/shares.Analy/AnalyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyServer is the server API for Analy service.
type AnalyServer interface {
	// AnalyCode 分析一直股票
	AnalyCode(context.Context, *AnalyCodeReq) (*AnalyCodeResp, error)
}

// UnimplementedAnalyServer can be embedded to have forward compatible implementations.
type UnimplementedAnalyServer struct {
}

func (*UnimplementedAnalyServer) AnalyCode(context.Context, *AnalyCodeReq) (*AnalyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyCode not implemented")
}

func RegisterAnalyServer(s server.Server, srv AnalyServer) {
	s.GetServer().RegisterService(&_Analy_serviceDesc, srv)
}

func _Analy_AnalyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyServer).AnalyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.Analy/AnalyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyServer).AnalyCode(ctx, req.(*AnalyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Analy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shares.Analy",
	HandlerType: (*AnalyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyCode",
			Handler:    _Analy_AnalyCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shares/analy.proto",
}
