// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shares

import (
	context "context"
	micro "github.com/gmsec/micro"
	client "github.com/gmsec/micro/client"
	server "github.com/gmsec/micro/server"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "rpc/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface
var _ server.Server
var _ client.Client
var _ micro.Service

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FlowClient is the client API for Flow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlowClient interface {
	// UpdateFlow 创建/更新工作流
	UpsetFlow(ctx context.Context, in *UpdateFlowReq, opts ...grpc.CallOption) (*FlowInfo, error)
	// GetFlow 获取工作流
	GetFlow(ctx context.Context, in *GetFlowReq, opts ...grpc.CallOption) (*GetFlowResp, error)
	// DeleteFlow 删除工作流
	DeleteFlow(ctx context.Context, in *GetFlowReq, opts ...grpc.CallOption) (*common.Empty, error)
}

type flowClient struct {
	cc client.Client
}

// GetFlowName get client name(package.class)
func GetFlowName() string {
	return "shares.Flow"
}

// GetFlowClient get client by clientname
func GetFlowClient() FlowClient {
	cc := micro.GetClient(GetFlowName())
	return &flowClient{cc}
}

// GetFlowClientByName get client by custom name
func GetFlowClientByName(name string) FlowClient {
	cc := micro.GetClient(name)
	return &flowClient{cc}
}

func NewFlowClient(cc client.Client) FlowClient {
	return &flowClient{cc}
}

func (c *flowClient) UpsetFlow(ctx context.Context, in *UpdateFlowReq, opts ...grpc.CallOption) (*FlowInfo, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(FlowInfo)
	err = conn.Invoke(ctx, "/shares.Flow/UpsetFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) GetFlow(ctx context.Context, in *GetFlowReq, opts ...grpc.CallOption) (*GetFlowResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetFlowResp)
	err = conn.Invoke(ctx, "/shares.Flow/GetFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) DeleteFlow(ctx context.Context, in *GetFlowReq, opts ...grpc.CallOption) (*common.Empty, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(common.Empty)
	err = conn.Invoke(ctx, "/shares.Flow/DeleteFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowServer is the server API for Flow service.
type FlowServer interface {
	// UpdateFlow 创建/更新工作流
	UpsetFlow(context.Context, *UpdateFlowReq) (*FlowInfo, error)
	// GetFlow 获取工作流
	GetFlow(context.Context, *GetFlowReq) (*GetFlowResp, error)
	// DeleteFlow 删除工作流
	DeleteFlow(context.Context, *GetFlowReq) (*common.Empty, error)
}

// UnimplementedFlowServer can be embedded to have forward compatible implementations.
type UnimplementedFlowServer struct {
}

func (*UnimplementedFlowServer) UpsetFlow(context.Context, *UpdateFlowReq) (*FlowInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsetFlow not implemented")
}
func (*UnimplementedFlowServer) GetFlow(context.Context, *GetFlowReq) (*GetFlowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlow not implemented")
}
func (*UnimplementedFlowServer) DeleteFlow(context.Context, *GetFlowReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlow not implemented")
}

func RegisterFlowServer(s server.Server, srv FlowServer) {
	s.GetServer().RegisterService(&_Flow_serviceDesc, srv)
}

func _Flow_UpsetFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).UpsetFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.Flow/UpsetFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).UpsetFlow(ctx, req.(*UpdateFlowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_GetFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).GetFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.Flow/GetFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).GetFlow(ctx, req.(*GetFlowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_DeleteFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).DeleteFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shares.Flow/DeleteFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).DeleteFlow(ctx, req.(*GetFlowReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Flow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shares.Flow",
	HandlerType: (*FlowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsetFlow",
			Handler:    _Flow_UpsetFlow_Handler,
		},
		{
			MethodName: "GetFlow",
			Handler:    _Flow_GetFlow_Handler,
		},
		{
			MethodName: "DeleteFlow",
			Handler:    _Flow_DeleteFlow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shares/flow.proto",
}
