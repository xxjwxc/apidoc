// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package example

import (
	context "context"
	micro "github.com/gmsec/micro"
	client "github.com/gmsec/micro/client"
	server "github.com/gmsec/micro/server"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface
var _ server.Server
var _ client.Client
var _ micro.Service

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExampleClient is the client API for Example service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExampleClient interface {
	// 定义SayHello方法
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type exampleClient struct {
	cc client.Client
}

// GetExampleName get client name(package.class)
func GetExampleName() string {
	return "example.example"
}

// GetExampleClient get client by clientname
func GetExampleClient() ExampleClient {
	cc := micro.GetClient(GetExampleName())
	return &exampleClient{cc}
}

// GetExampleClientByName get client by custom name
func GetExampleClientByName(name string) ExampleClient {
	cc := micro.GetClient(name)
	return &exampleClient{cc}
}

func NewExampleClient(cc client.Client) ExampleClient {
	return &exampleClient{cc}
}

func (c *exampleClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	conn, err := c.cc.Next()
	defer conn.Close()
	if err != nil {
		return nil, err
	}
	out := new(HelloReply)
	err = conn.Invoke(ctx, "/example.example/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleServer is the server API for Example service.
type ExampleServer interface {
	// 定义SayHello方法
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

// UnimplementedExampleServer can be embedded to have forward compatible implementations.
type UnimplementedExampleServer struct {
}

func (*UnimplementedExampleServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}

func RegisterExampleServer(s server.Server, srv ExampleServer) {
	s.GetServer().RegisterService(&_Example_serviceDesc, srv)
}

func _Example_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.example/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Example_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.example",
	HandlerType: (*ExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Example_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example/hello.proto",
}
