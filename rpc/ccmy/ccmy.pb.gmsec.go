// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ccmy

import (
	context "context"
	micro "github.com/gmsec/micro"
	client "github.com/gmsec/micro/client"
	server "github.com/gmsec/micro/server"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "rpc/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface
var _ server.Server
var _ client.Client
var _ micro.Service

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CcmyClient is the client API for Ccmy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CcmyClient interface {
	// GetStore 获取门店信息
	GetStore(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetStoreResp, error)
	// Add 添加一个
	Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*common.Empty, error)
	// AddDoc 添加一个
	AddDoc(ctx context.Context, in *AddDocReq, opts ...grpc.CallOption) (*common.Empty, error)
	// GetAllName 获取所有名字
	GetAllName(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetAllNameResp, error)
	// Search 搜索
	Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error)
	// AddGroup 添加门店
	AddGroup(ctx context.Context, in *AddGroupReq, opts ...grpc.CallOption) (*common.Empty, error)
	// UpdateUserGroup 更新门店信息
	UpdateUserGroup(ctx context.Context, in *UpdateUserGroupReq, opts ...grpc.CallOption) (*common.Empty, error)
	// GetAllRequest 获取所有申请用户
	GetAllRequest(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetAllRequestResp, error)
	// Request 更新门店信息
	Request(ctx context.Context, in *RequestReq, opts ...grpc.CallOption) (*common.Empty, error)
}

type ccmyClient struct {
	cc client.Client
}

// GetCcmyName get client name(package.class)
func GetCcmyName() string {
	return "ccmy.ccmy"
}

// GetCcmyClient get client by clientname
func GetCcmyClient() CcmyClient {
	cc := micro.GetClient(GetCcmyName())
	return &ccmyClient{cc}
}

// GetCcmyClientByName get client by custom name
func GetCcmyClientByName(name string) CcmyClient {
	cc := micro.GetClient(name)
	return &ccmyClient{cc}
}

func NewCcmyClient(cc client.Client) CcmyClient {
	return &ccmyClient{cc}
}

func (c *ccmyClient) GetStore(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetStoreResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetStoreResp)
	err = conn.Invoke(ctx, "/ccmy.ccmy/GetStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ccmyClient) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*common.Empty, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(common.Empty)
	err = conn.Invoke(ctx, "/ccmy.ccmy/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ccmyClient) AddDoc(ctx context.Context, in *AddDocReq, opts ...grpc.CallOption) (*common.Empty, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(common.Empty)
	err = conn.Invoke(ctx, "/ccmy.ccmy/AddDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ccmyClient) GetAllName(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetAllNameResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetAllNameResp)
	err = conn.Invoke(ctx, "/ccmy.ccmy/GetAllName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ccmyClient) Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(SearchResp)
	err = conn.Invoke(ctx, "/ccmy.ccmy/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ccmyClient) AddGroup(ctx context.Context, in *AddGroupReq, opts ...grpc.CallOption) (*common.Empty, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(common.Empty)
	err = conn.Invoke(ctx, "/ccmy.ccmy/AddGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ccmyClient) UpdateUserGroup(ctx context.Context, in *UpdateUserGroupReq, opts ...grpc.CallOption) (*common.Empty, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(common.Empty)
	err = conn.Invoke(ctx, "/ccmy.ccmy/UpdateUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ccmyClient) GetAllRequest(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetAllRequestResp, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(GetAllRequestResp)
	err = conn.Invoke(ctx, "/ccmy.ccmy/GetAllRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ccmyClient) Request(ctx context.Context, in *RequestReq, opts ...grpc.CallOption) (*common.Empty, error) {
	conn, err := c.cc.Next()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	out := new(common.Empty)
	err = conn.Invoke(ctx, "/ccmy.ccmy/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CcmyServer is the server API for Ccmy service.
type CcmyServer interface {
	// GetStore 获取门店信息
	GetStore(context.Context, *common.Empty) (*GetStoreResp, error)
	// Add 添加一个
	Add(context.Context, *AddReq) (*common.Empty, error)
	// AddDoc 添加一个
	AddDoc(context.Context, *AddDocReq) (*common.Empty, error)
	// GetAllName 获取所有名字
	GetAllName(context.Context, *common.Empty) (*GetAllNameResp, error)
	// Search 搜索
	Search(context.Context, *SearchReq) (*SearchResp, error)
	// AddGroup 添加门店
	AddGroup(context.Context, *AddGroupReq) (*common.Empty, error)
	// UpdateUserGroup 更新门店信息
	UpdateUserGroup(context.Context, *UpdateUserGroupReq) (*common.Empty, error)
	// GetAllRequest 获取所有申请用户
	GetAllRequest(context.Context, *common.Empty) (*GetAllRequestResp, error)
	// Request 更新门店信息
	Request(context.Context, *RequestReq) (*common.Empty, error)
}

// UnimplementedCcmyServer can be embedded to have forward compatible implementations.
type UnimplementedCcmyServer struct {
}

func (*UnimplementedCcmyServer) GetStore(context.Context, *common.Empty) (*GetStoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStore not implemented")
}
func (*UnimplementedCcmyServer) Add(context.Context, *AddReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedCcmyServer) AddDoc(context.Context, *AddDocReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDoc not implemented")
}
func (*UnimplementedCcmyServer) GetAllName(context.Context, *common.Empty) (*GetAllNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllName not implemented")
}
func (*UnimplementedCcmyServer) Search(context.Context, *SearchReq) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedCcmyServer) AddGroup(context.Context, *AddGroupReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroup not implemented")
}
func (*UnimplementedCcmyServer) UpdateUserGroup(context.Context, *UpdateUserGroupReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserGroup not implemented")
}
func (*UnimplementedCcmyServer) GetAllRequest(context.Context, *common.Empty) (*GetAllRequestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRequest not implemented")
}
func (*UnimplementedCcmyServer) Request(context.Context, *RequestReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}

func RegisterCcmyServer(s server.Server, srv CcmyServer) {
	s.GetServer().RegisterService(&_Ccmy_serviceDesc, srv)
}

func _Ccmy_GetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CcmyServer).GetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ccmy.ccmy/GetStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CcmyServer).GetStore(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ccmy_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CcmyServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ccmy.ccmy/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CcmyServer).Add(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ccmy_AddDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CcmyServer).AddDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ccmy.ccmy/AddDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CcmyServer).AddDoc(ctx, req.(*AddDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ccmy_GetAllName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CcmyServer).GetAllName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ccmy.ccmy/GetAllName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CcmyServer).GetAllName(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ccmy_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CcmyServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ccmy.ccmy/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CcmyServer).Search(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ccmy_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CcmyServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ccmy.ccmy/AddGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CcmyServer).AddGroup(ctx, req.(*AddGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ccmy_UpdateUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CcmyServer).UpdateUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ccmy.ccmy/UpdateUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CcmyServer).UpdateUserGroup(ctx, req.(*UpdateUserGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ccmy_GetAllRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CcmyServer).GetAllRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ccmy.ccmy/GetAllRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CcmyServer).GetAllRequest(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ccmy_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CcmyServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ccmy.ccmy/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CcmyServer).Request(ctx, req.(*RequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ccmy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ccmy.ccmy",
	HandlerType: (*CcmyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStore",
			Handler:    _Ccmy_GetStore_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Ccmy_Add_Handler,
		},
		{
			MethodName: "AddDoc",
			Handler:    _Ccmy_AddDoc_Handler,
		},
		{
			MethodName: "GetAllName",
			Handler:    _Ccmy_GetAllName_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Ccmy_Search_Handler,
		},
		{
			MethodName: "AddGroup",
			Handler:    _Ccmy_AddGroup_Handler,
		},
		{
			MethodName: "UpdateUserGroup",
			Handler:    _Ccmy_UpdateUserGroup_Handler,
		},
		{
			MethodName: "GetAllRequest",
			Handler:    _Ccmy_GetAllRequest_Handler,
		},
		{
			MethodName: "Request",
			Handler:    _Ccmy_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ccmy/ccmy.proto",
}
